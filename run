#!/usr/bin/env python3
import os
import subprocess
import traceback
import static
import secrets
import re
import sys
from os.path import join as pjoin

class bcolors:
    RESET = '\033[0m'
    ERROR = '\033[1;31m'
    SUCCESS = '\033[1;32m'
    QUESTION = '\033[1;33m'
    INFO = '\033[1;34m'

###############################################################################

def print_success(msg):
    print(bcolors.SUCCESS + msg + bcolors.RESET)

def print_info(msg):
    print(bcolors.INFO + msg + bcolors.RESET)

def ask_question(msg):
    return input(bcolors.QUESTION + msg + bcolors.RESET)

###############################################################################

def create_app(appname, path):
    basedir = os.getcwd()
    print_info(f'Creation of {appname} starting at {path}')
    
    os.mkdir(pjoin(path, 'dev'))
    print_success('dev directory successful created')

    ## keep the output for futur verbose flag
    output = subprocess.run(
        f"vue create -n -p {pjoin(basedir, 'vue-preset.json')} frontend".split(),
        cwd=path, stdout=subprocess.PIPE, check=True
    )
    print_success('frontend directory successful created')

    os.mkdir(pjoin(path, 'backend'))
    print_success('backend directory successful created')

def fill_dev(appname, path):
    print_info('Filling of dev file')

    with open(pjoin(path, 'dev', 'docker-compose.yml'), 'w') as file:
        file.write(static.get_docker_compose(appname))
    print_success('docker compose successful created')

    with open(pjoin(path, 'dev', '.env'), 'w') as file:
        file.write(static.get_env(appname, secrets.token_urlsafe(50)))
    print_success('env successful created')

def fill_front(appname, path):
    print_info('Filling of front file')

    with open(pjoin(path, 'frontend', 'Dockerfile'), 'w') as file:
        file.write(static.get_front_dockerfile())
    print_success('front dockerfile successful created')

    ## TODO replace default preset with personal one
    pipe_y = subprocess.Popen(['yes'], stdout=subprocess.PIPE)
    output = subprocess.run(
        "vue add vuetify --preset default".split(),
        cwd=pjoin(path, 'frontend'), stdout=subprocess.PIPE, stdin=pipe_y.stdout, check=True
    )
    print_success('vuetify successful added')

    output = subprocess.run(
        "yarn add axios".split(),
        cwd=pjoin(path, 'frontend'), stdout=subprocess.PIPE, check=True
    )
    print_success('axios successful added')
    
    with open(pjoin(path, 'frontend', 'src', 'components', 'HelloWorld.vue'), 'w') as file:
        file.write(static.get_test_world())
    print_success('test world successful created')

def fill_back(appname, path):
    print_info('Filling of back file')

    with open(pjoin(path, 'backend', 'Dockerfile'), 'w') as file:
        file.write(static.get_back_dockerfile())
    print_success('back dockerfile successful created')
    
    with open(pjoin(path, 'backend', 'requirements.txt'), 'w') as file:
        file.write(static.get_requirements())
    print_success('requirements successful created')
    
    #output = \
    subprocess.run(
        f"docker-compose -f dev/docker-compose.yml run {appname}_backend .local/bin/django-admin startproject back .".split(),
        cwd=path, check=True, #stdout=subprocess.PIPE
    )
    print_success('backend project successful created')
    
    pattern = re.compile("SECRET_KEY = \'(.*)\'")
    with open(pjoin(path, 'backend', 'back', 'settings.py'), 'r') as file:
        lines = file.read()
        result = re.findall(pattern, lines)
    print_success('secret key successful retrieved')
    
    with open(pjoin(path, 'dev', '.env'), 'a') as file:
        file.write(f'DJANGO_SECRET_KEY={result[0]}')
    print_success('secret key successful added to env')
    
    with open(pjoin(path, 'backend', 'back', 'settings.py'), 'w') as file:
        file.write(static.get_init_settings())
    print_success('settings successful modified')
    
    output = subprocess.run(
        f"docker-compose -f dev/docker-compose.yml run {appname}_backend python3 manage.py startapp api".split(),
        cwd=path, check=True, stdout=subprocess.PIPE)
    print_success('app successful started')

    with open(pjoin(path, 'backend', 'back', 'settings.py'), 'r') as file:
        settings = file.read()
        new_settings = re.sub("(INSTALLED_APPS = \[(?:\n|[^[])*\')\n\]", r"\1,\n    'api'\n]", settings, flags=re.M)
    with open(pjoin(path, 'backend', 'back', 'settings.py'), 'w') as file:
        file.write(new_settings)
    print_success('settings successful updated')

def add_layouts(appname, path):
    os.mkdir(pjoin(path, 'frontend', 'src', 'layouts'))
    with open(pjoin(path, 'frontend', 'src', 'layouts', 'Default.vue'), 'w') as file:
        file.write(static.get_default_layout())
    
    with open(pjoin(path, 'frontend', 'src', 'components', 'FooterBar.vue'), 'w') as file:
        file.write(static.get_footerbar())
    with open(pjoin(path, 'frontend', 'src', 'components', 'NavBar.vue'), 'w') as file:
        file.write(static.get_navbar())
    with open(pjoin(path, 'frontend', 'src', 'App.vue'), 'w') as file:
        file.write(static.get_app())
    with open(pjoin(path, 'frontend', 'src', 'main.js'), 'w') as file:
        file.write(static.get_main())

def add_api(appname, path):
    with open(pjoin(path, 'frontend', 'src', 'API.js'), 'w') as file:
        file.write(static.get_api())
    #Model
    os.mkdir(pjoin(path, 'backend', 'api', 'models'))
    os.remove(pjoin(path, 'backend', 'api', 'models.py'))
    with open(pjoin(path, 'backend', 'api', 'models', 'test_model.py'), 'w') as file:
        file.write(static.get_test_model())
    #Serializer
    os.mkdir(pjoin(path, 'backend', 'api', 'serializers'))
    with open(pjoin(path, 'backend', 'api', 'serializers', 'test_serializer.py'), 'w') as file:
        file.write(static.get_test_serializer())
    #View
    os.remove(pjoin(path, 'backend', 'api', 'views.py'))
    os.mkdir(pjoin(path, 'backend', 'api', 'views'))
    with open(pjoin(path, 'backend', 'api', 'views', 'test_view.py'), 'w') as file:
        file.write(static.get_test_view())

    #url
    with open(pjoin(path, 'backend', 'api', 'urls.py'), 'w') as file:
        file.write(static.get_suburl())
    with open(pjoin(path, 'backend', 'back', 'urls.py'), 'w') as file:
        file.write(static.get_url())

def add_authentication(appname, path):
    pass

def main():
    appname = ask_question('Name of the application: ').lower()
    path = ask_question('Path of the application (default: current): ') or '.'

    create_app(appname, path)
    
    with open(pjoin(path, '.gitignore'), 'w') as file:
        file.write('.env')
    print_success('gitignore successful created')
    print_success('.env added to gitignore')
    
    fill_dev(appname, path)
    fill_front(appname, path)
    fill_back(appname, path)
    
    # add_layouts(appname, path)
    # add_api(appname, path)
    # add_authentication(appname, path)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(bcolors.ERROR + f'creation aborted: {e}' + bcolors.RESET)
        sys.exit(84)
        # traceback.print_exc()